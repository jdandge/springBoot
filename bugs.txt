# WCSearchCacheManager    change all (v) to v
# WCSearchCountryCodeHelper convert map to enumMap
# WCSDestinationLocationProcessor   change adjacentCountryStateList direct to return statement


# WCSingleFindNetworkValidator


if (originCityPredicate.and((senderAccountCheckPredicate.or(wuposPredicate.negate()).or(directedNetworkPredicate)).negate())
				.test(wcSearchKey)) {
			if (wupNetworkPredicate.test(wcSearchKey)) {
				throw exceptionUtils.prepareWuException(WCSearchErrorConstant.ORDSRCHWC51, new WUServiceException(),
						WUExceptionType.SERVER);}


if (originCityPredicate.and((senderAccountCheckPredicate.or(wuposPredicate.negate()).or(directedNetworkPredicate)).negate())
				.test(wcSearchKey)  && wupNetworkPredicate.test(wcSearchKey)) {
				throw exceptionUtils.prepareWuException(WCSearchErrorConstant.ORDSRCHWC51, new WUServiceException(),
						WUExceptionType.SERVER);}



#  WCSearchHeaderUtility


public String getFxServiceUrl() {
		return getPropertyValue(ServiceBaseUrlConstant.FX_SRVC_URL).concat(ProxyConstant.FX_ENDPOINT);
	}


public String getFxServiceUrl() {
                 if(getPropertyValue(ServiceBaseUrlConstant.FX_SRVC_URL).isPresent()){
		return getPropertyValue(ServiceBaseUrlConstant.FX_SRVC_URL).concat(ProxyConstant.FX_ENDPOINT);
}
      return null;

	}


#  WCSingleFindManager


@HystrixCommand(fallbackMethod = "getMOGexResponseFallback", commandKey = CircuitBreakerConstant.MOGEX_COMMAND)
	public Optional<MoGexSingleFindResponse> getMOGexResponse(MOSearchKey wcSearchKey,
			WCSearchRequestData requestData) {
		Optional<WCOrderLookupResponse> orderLookupResponseOptional = singleFindProxyService
				.getMOGexServiceResponse(wcSearchKey, requestData);
		return Optional.ofNullable(orderLookupResponseOptional.get().getMoGexSingleFindResponse());
	}

@HystrixCommand(fallbackMethod = "getMOGexResponseFallback", commandKey = CircuitBreakerConstant.MOGEX_COMMAND)
	public Optional<MoGexSingleFindResponse> getMOGexResponse(MOSearchKey wcSearchKey,
			WCSearchRequestData requestData) {
		Optional<WCOrderLookupResponse> orderLookupResponseOptional = singleFindProxyService
				.getMOGexServiceResponse(wcSearchKey, requestData);
                      if(orderLookupResponseOptional .isPresent()){
		           return Optional.ofNullable(orderLookupResponseOptional.get().getMoGexSingleFindResponse());
	               }
                return null;
}




